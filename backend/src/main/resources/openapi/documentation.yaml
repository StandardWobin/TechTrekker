openapi: "3.0.3"
info:
  title: "TechTrekker API"
  description: "API description for TechTrekker."
  version: "1.0.0"
servers:
- url: "https://com_nw_techtrekker"
paths:
  /api/v1/users:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
  /api/v1/users/{id}:
    delete:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
        "202":
          description: "Accepted"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
  /api/v1/users/edit/{id}:
    put:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/UserEdit"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
  /api/v1/users/register:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Username already taken."
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
  /api/v1/hello:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Hello World!"
  /protected/route/basic:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /protected/route/form:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /session/increment:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /api/v1/JobResults:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/JobResult"
  /api/v1/JobResults/{id}:
    delete:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
        "202":
          description: "Accepted"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/JobResult"
  /api/v1/JobResults/{id}/edit:
    put:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
  /api/v1/JobResults/add:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/JobResult"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/JobResult"
  /api/v1/jobSites:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/JobSite"
  /api/v1/jobSites/{id}:
    delete:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
        "202":
          description: "Accepted"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/JobSite"
  /api/v1/jobSites/{id}/edit:
    put:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
  /api/v1/jobSites/add:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/JobSite"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/JobSite"
  /api/v1/JobPostings:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/JobPosting"
  /api/v1/JobPostings/{id}:
    delete:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
        "202":
          description: "Accepted"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/JobPosting"
  /api/v1/JobPostings/{id}/edit:
    put:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
  /api/v1/JobPostings/add:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/JobPosting"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/JobPosting"
  /api/v1/Technologies:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Technology"
  /api/v1/Technologies/{id}:
    delete:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
        "202":
          description: "Accepted"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Technology"
  /api/v1/Technologies/{id}/edit:
    put:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
  /api/v1/Technologies/add:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/Technology"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Technology"
  /api/v1/filters:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Filter"
  /api/v1/filters/{id}:
    delete:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
        "202":
          description: "Accepted"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Filter"
  /api/v1/filters/{id}/edit:
    put:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
  /api/v1/filters/add:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/Filter"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Filter"
components:
  schemas:
    User:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        username:
          type: "string"
        password:
          type: "string"
        email:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        createdAt:
          type: "string"
          format: "date-time"
    UserEdit:
      type: "object"
      properties:
        firstName:
          type: "string"
        lastName:
          type: "string"
    BigDecimal:
      type: "object"
      properties: {}
    JobResult:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        jobPostingId:
          type: "integer"
          format: "int32"
        jobSiteId:
          type: "integer"
          format: "int32"
        title:
          type: "string"
        companyName:
          type: "string"
        location:
          type: "string"
        description:
          type: "string"
        salary:
          $ref: "#/components/schemas/BigDecimal"
    JobSite:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        url:
          type: "string"
        username:
          type: "string"
        password:
          type: "string"
    JobPosting:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        title:
          type: "string"
        companyName:
          type: "string"
        location:
          type: "string"
        description:
          type: "string"
        salary:
          $ref: "#/components/schemas/BigDecimal"
    Technology:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        description:
          type: "string"
        skillLevel:
          type: "string"
    Filter:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        technology:
          type: "integer"
          format: "int32"
        title:
          type: "string"
        location:
          type: "string"
        salary:
          $ref: "#/components/schemas/BigDecimal"